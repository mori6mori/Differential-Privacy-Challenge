{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# CDSS Data Science Hackathon 2023\n","\n","## Data and Privacy Track\n","\n","Sunny Fang, Lucy King, Andrea Lopez, Mori Liu"],"metadata":{"id":"NTv_FUZ1L4gz"}},{"cell_type":"code","source":["! pip install python-dp"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VY16vPbOymDx","executionInfo":{"status":"ok","timestamp":1676143107346,"user_tz":300,"elapsed":4734,"user":{"displayName":"Andrea Lopez","userId":"06384222725563447101"}},"outputId":"77f83377-3afe-4741-8323-727ef8ff8fad"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting python-dp\n","  Downloading python_dp-1.1.1-cp38-cp38-manylinux1_x86_64.whl (3.5 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.5/3.5 MB\u001b[0m \u001b[31m34.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: python-dp\n","Successfully installed python-dp-1.1.1\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"6p-DntdaLzNw"},"outputs":[],"source":["import pandas as pd\n","import pydp as dp\n","from pydp.algorithms.laplacian import BoundedSum, BoundedMean, Count, Max\n","import pandas as pd\n","import statistics  # for calculating mean without applying differential privacy"]},{"cell_type":"markdown","source":["Import dataset & clean"],"metadata":{"id":"P6DK42BfrfIv"}},{"cell_type":"code","source":["df = pd.read_csv('/yellow_cab_data.csv')\n","df.head()\n","df = df.dropna()\n","print(df.size)\n","print(df.dtypes)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3RmewPXkriKK","executionInfo":{"status":"ok","timestamp":1676145585591,"user_tz":300,"elapsed":415,"user":{"displayName":"Andrea Lopez","userId":"06384222725563447101"}},"outputId":"a2c05fc1-50e9-4c6b-d2ed-53062e73e081"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2768661\n","VendorID                   int64\n","tpep_pickup_datetime      object\n","tpep_dropoff_datetime     object\n","passenger_count          float64\n","trip_distance            float64\n","RatecodeID               float64\n","store_and_fwd_flag        object\n","PULocationID               int64\n","DOLocationID               int64\n","payment_type               int64\n","fare_amount              float64\n","extra                    float64\n","mta_tax                  float64\n","tip_amount               float64\n","tolls_amount             float64\n","improvement_surcharge    float64\n","total_amount             float64\n","congestion_surcharge     float64\n","airport_fee              float64\n","dtype: object\n"]}]},{"cell_type":"markdown","source":["Build new dataframe"],"metadata":{"id":"gyw3YJXo4xBQ"}},{"cell_type":"code","source":["private_df = pd.DataFrame(data=None, columns=df.columns)"],"metadata":{"id":"L01wsJsB4wWe"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# For each column independently, extract noisy measurements (Laplace)\n","## Numeric columns only"],"metadata":{"id":"PLqxbtdQsxU-"}},{"cell_type":"code","source":["# Private mean\n","def private_mean(privacy_budget: float, col:str) -> float:\n","    low_bound = min(df[col])\n","    up_bound = max(df[col])\n","    x = BoundedMean(privacy_budget, 0, low_bound, up_bound, dtype='float')\n","    return x.quick_result(list(df[col].astype('float')))\n","\n","# Private max\n","def private_max(privacy_budget: float, col:str) -> int:\n","    low_bound = min(df[col])\n","    up_bound = max(df[col])\n","    x = Max(epsilon = privacy_budget, lower_bound=low_bound, upper_bound=up_bound, dtype=\"float\")\n","    return x.quick_result(list(df[col].astype('float')))\n","\n","# Private min\n","# def private_min(privacy_budget: float) -> int:\n","#     low_bound = min(df[col])\n","#     up_bound = max(df[col])\n","#     x = dp.Min(epsilon = privacy_budget, lower_bound=low_bound, upper_bound=up_bound, dtype=\"int\")\n","#     return x.quick_result(list(df[\"carrots_eaten\"]))\n","\n","# Private sum\n","def private_sum(privacy_budget: float, col:str) -> int:\n","    x = BoundedSum(epsilon = privacy_budget, delta = 0, lower_bound= 1, upper_bound = 100, dtype=\"float\")\n","    return x.quick_result(list(df[col].astype('float')))\n","\n","private_means = []\n","private_maxes = []\n","private_sums = []\n","non_numeric_columns = ['VendorID','RatecodeID','PULocationID','DOLocationID','tpep_pickup_datetime','tpep_dropoff_datetime','store_and_fwd_flag']\n","\n","for col in df.columns:\n","  if col not in non_numeric_columns and (df[col].dtypes == 'int64' or df[col].dtypes == 'float64'):\n","    # Pull metrics\n","    private_means.append((col, private_mean(1, col)))\n","    private_maxes.append((col, private_max(1, col)))\n","    private_sums.append((col, private_sum(1, col)))\n","\n","\n","print(private_means) # -> private means has all of our means w/ noise in a list, each element is (column name, private mean)\n","print(private_maxes)\n","print(private_sums)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hWBJiHzFySvQ","executionInfo":{"status":"ok","timestamp":1676147920161,"user_tz":300,"elapsed":7395,"user":{"displayName":"Andrea Lopez","userId":"06384222725563447101"}},"outputId":"bff46c01-ea48-4318-cd44-3941f1f2c75f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[('passenger_count', 1.3882003627409918), ('trip_distance', 3.1011856862438236), ('payment_type', 1.2292585732758496), ('fare_amount', 12.633815673320356), ('extra', 1.0348828150368297), ('mta_tax', 0.491109244373702), ('tip_amount', 2.3705305823524085), ('tolls_amount', 0.37227022542622024), ('improvement_surcharge', 0.2964701094268487), ('total_amount', 18.849352919306682), ('congestion_surcharge', 2.2808745965345896), ('airport_fee', 0.08178983490561538)]\n","[('passenger_count', 6.0), ('trip_distance', 47.599145091291106), ('payment_type', 4.0), ('fare_amount', 149.74842443786127), ('extra', 8.2499593989079), ('mta_tax', 0.5), ('tip_amount', 31.029592573794183), ('tolls_amount', 20.3802879443701), ('improvement_surcharge', 0.29999999999999993), ('total_amount', 185.25051448032883), ('congestion_surcharge', 2.5), ('airport_fee', 1.25)]\n","[('passenger_count', 205535.63375727227), ('trip_distance', 463389.4077160584), ('payment_type', 179026.10113179416), ('fare_amount', 1846192.7474168628), ('extra', 223295.88169035), ('mta_tax', 145734.22995827813), ('tip_amount', 381796.4612641671), ('tolls_amount', 192563.15783065872), ('improvement_surcharge', 145733.6291809671), ('total_amount', 2749513.2868056647), ('congestion_surcharge', 346024.96104179125), ('airport_fee', 148246.84430311213)]\n"]}]},{"cell_type":"markdown","source":["# Generate synthetic data based on measurements"],"metadata":{"id":"umYGeaN57cu1"}},{"cell_type":"code","source":["df.size\n"],"metadata":{"id":"Em_R45Md1klB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1676144706429,"user_tz":300,"elapsed":120,"user":{"displayName":"Andrea Lopez","userId":"06384222725563447101"}},"outputId":"b1fd8b6d-0713-4451-d039-6e531fa07427"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2850000"]},"metadata":{},"execution_count":14}]},{"cell_type":"markdown","source":["# Data visualizations"],"metadata":{"id":"btw6QeNE7f-1"}},{"cell_type":"code","source":[],"metadata":{"id":"HHy4AKef7h7O"},"execution_count":null,"outputs":[]}]}