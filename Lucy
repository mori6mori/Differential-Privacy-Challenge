{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO7YPImJKRDv3L/QL2RsSSP"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["pip install python-dp"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"khCY3r_ePlvT","executionInfo":{"status":"ok","timestamp":1676148714768,"user_tz":300,"elapsed":6290,"user":{"displayName":"Lucy King","userId":"00228120380069285281"}},"outputId":"9b6e1596-e2e0-43d1-c8cb-0bd7bb1bf500"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting python-dp\n","  Downloading python_dp-1.1.1-cp38-cp38-manylinux1_x86_64.whl (3.5 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.5/3.5 MB\u001b[0m \u001b[31m22.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: python-dp\n","Successfully installed python-dp-1.1.1\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KYaRGjqRO9DQ"},"outputs":[],"source":["import pandas as pd\n","import pydp as dp\n","from pydp.algorithms.laplacian import BoundedSum, BoundedMean, Count, Max\n","import pandas as pd\n","import statistics  # for calculating mean without applying differential privacy"]},{"cell_type":"code","source":["from scipy import stats\n","\n","df = pd.read_csv('yellow_cab_data.csv')\n","\n","tips = df[(np.abs(stats.zscore(df['tip_amount'])) < 3)]\n","fare = df[(np.abs(stats.zscore(df['fare_amount'])) < 3)]\n","\n","fare = fare[fare['fare_amount'] > 0]\n","\n","perc = tips['tip_amount']/fare['fare_amount']\n","\n","print(perc.mean())\n"],"metadata":{"id":"CY1UeSMyPt5e","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1676154214834,"user_tz":300,"elapsed":829,"user":{"displayName":"Lucy King","userId":"00228120380069285281"}},"outputId":"118e4cb6-e3ab-42f1-af88-15f0b9bfcfb7"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["0.21266686446981897\n"]}]},{"cell_type":"code","source":["pip install git+https://github.com/ryan112358/private-pgm.git"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OptGnxlvRsrA","executionInfo":{"status":"ok","timestamp":1676149256085,"user_tz":300,"elapsed":10578,"user":{"displayName":"Lucy King","userId":"00228120380069285281"}},"outputId":"a7b77996-0979-4259-9399-52d97256f5d5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting git+https://github.com/ryan112358/private-pgm.git\n","  Cloning https://github.com/ryan112358/private-pgm.git to /tmp/pip-req-build-bsavumlb\n","  Running command git clone --filter=blob:none --quiet https://github.com/ryan112358/private-pgm.git /tmp/pip-req-build-bsavumlb\n","  Resolved https://github.com/ryan112358/private-pgm.git to commit 6bceb369c1b578a841248a8c742d135e14b3940a\n","  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: numpy in /usr/local/lib/python3.8/dist-packages (from private-pgm==0.0.1) (1.21.6)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.8/dist-packages (from private-pgm==0.0.1) (1.7.3)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.8/dist-packages (from private-pgm==0.0.1) (1.3.5)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.8/dist-packages (from private-pgm==0.0.1) (3.0)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.8/dist-packages (from private-pgm==0.0.1) (3.2.2)\n","Collecting nose\n","  Downloading nose-1.3.7-py3-none-any.whl (154 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m154.7/154.7 KB\u001b[0m \u001b[31m4.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting disjoint-set\n","  Downloading disjoint_set-0.7.3-py3-none-any.whl (5.2 kB)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.8/dist-packages (from matplotlib->private-pgm==0.0.1) (0.11.0)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.8/dist-packages (from matplotlib->private-pgm==0.0.1) (2.8.2)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.8/dist-packages (from matplotlib->private-pgm==0.0.1) (1.4.4)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.8/dist-packages (from matplotlib->private-pgm==0.0.1) (3.0.9)\n","Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.8/dist-packages (from pandas->private-pgm==0.0.1) (2022.7.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.8/dist-packages (from python-dateutil>=2.1->matplotlib->private-pgm==0.0.1) (1.15.0)\n","Building wheels for collected packages: private-pgm\n","  Building wheel for private-pgm (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for private-pgm: filename=private_pgm-0.0.1-py3-none-any.whl size=41258 sha256=f90464c0126d8e231237cff742d4f68c2ffa0017d6f4e8c75faa0ca6a9b57acc\n","  Stored in directory: /tmp/pip-ephem-wheel-cache-2_nf7b3a/wheels/5a/14/9b/b477f169709d294aa3105c1a570bd3fb425ec4ce9fd374088a\n","Successfully built private-pgm\n","Installing collected packages: nose, disjoint-set, private-pgm\n","Successfully installed disjoint-set-0.7.3 nose-1.3.7 private-pgm-0.0.1\n"]}]},{"cell_type":"code","source":["import numpy as np\n","from scipy import sparse\n","from mbi import Dataset\n","\n","data = Dataset.load('yellow_cab_data.csv', 'y_cab_domain.csv')\n","\n","# SELECT the marginals we'd like to measure\n","marginals = [('passenger_count', 'trip_distance', 'payment_type', 'fare_amount', 'extra'\n",", 'mta_tax', 'tip_amount', 'tolls_amount', 'improvement_surcharge', 'total_amount',\n"," 'congestion_surcharge', 'Airport_fee')]\n","\n","# MEASURE the marginals and log the noisy answers\n","sigma = 50 \n","measurements = []\n","for M in marginals:\n","    x = data.project(M).datavector()\n","    y = x + np.random.normal(loc=0, scale=sigma, size=x.shape)\n","    I = sparse.eye(x.size)\n","    measurements.append( (I, y, sigma, M) )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":375},"id":"tfdKPsByQAOT","executionInfo":{"status":"error","timestamp":1676150589991,"user_tz":300,"elapsed":1037,"user":{"displayName":"Lucy King","userId":"00228120380069285281"}},"outputId":"74f63d9d-9638-4b8b-e7d1-e92323ccb87a"},"execution_count":null,"outputs":[{"output_type":"error","ename":"UnicodeDecodeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mUnicodeDecodeError\u001b[0m                        Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-f5b8fa8aac6c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mmbi\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mDataset\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mDataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'yellow_cab_data.csv'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'y_cab_domain.csv'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;31m# SELECT the marginals we'd like to measure\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/mbi/dataset.py\u001b[0m in \u001b[0;36mload\u001b[0;34m(path, domain)\u001b[0m\n\u001b[1;32m     39\u001b[0m         \"\"\"\n\u001b[1;32m     40\u001b[0m         \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 41\u001b[0;31m         \u001b[0mconfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mjson\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdomain\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     42\u001b[0m         \u001b[0mdomain\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mDomain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeys\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     43\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mDataset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdomain\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.8/json/__init__.py\u001b[0m in \u001b[0;36mload\u001b[0;34m(fp, cls, object_hook, parse_float, parse_int, parse_constant, object_pairs_hook, **kw)\u001b[0m\n\u001b[1;32m    291\u001b[0m     \u001b[0mkwarg\u001b[0m\u001b[0;34m;\u001b[0m \u001b[0motherwise\u001b[0m\u001b[0;31m \u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0mJSONDecoder\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;31m`\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0mused\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    292\u001b[0m     \"\"\"\n\u001b[0;32m--> 293\u001b[0;31m     return loads(fp.read(),\n\u001b[0m\u001b[1;32m    294\u001b[0m         \u001b[0mcls\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcls\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mobject_hook\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mobject_hook\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    295\u001b[0m         \u001b[0mparse_float\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparse_float\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparse_int\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparse_int\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.8/codecs.py\u001b[0m in \u001b[0;36mdecode\u001b[0;34m(self, input, final)\u001b[0m\n\u001b[1;32m    320\u001b[0m         \u001b[0;31m# decode input (taking the buffer into account)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    321\u001b[0m         \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuffer\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 322\u001b[0;31m         \u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconsumed\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_buffer_decode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfinal\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    323\u001b[0m         \u001b[0;31m# keep undecoded input until the next call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    324\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuffer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mconsumed\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mUnicodeDecodeError\u001b[0m: 'utf-8' codec can't decode byte 0x82 in position 11: invalid start byte"]}]},{"cell_type":"code","source":["#Attempt to manually add noise\n","\n","df = pd.read_csv('yellow_cab_data.csv')\n","\n","#make a df of all numeric cols\n","\n","for col in df.columns:\n","  for val in df[col]:\n","    val = "],"metadata":{"id":"blQypsl8bwOX"},"execution_count":null,"outputs":[]}]}